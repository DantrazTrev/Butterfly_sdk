/**
 * The Butterfly-API
 * The butterfly is a game/simulation model that is based on the Butterfly effect on human decision making modelled as ANNs, The project is inspired by the likes of Life is Strange Series , Until Dawn and is a going to have a DnD styled interface. This current API provides various game flows and models to create a simulation model or game of your own
 *
 * OpenAPI spec version: 1.0
 * Contact: dantraztrev@gmail.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("DefaultApi", () => {
  let instance: api.DefaultApi
  beforeEach(function() {
    instance = new api.DefaultApi(config)
  });

  test("getNameDay", () => {
    const name: string = "name_example"
    return expect(instance.getNameDay(name, {})).resolves.toBe(null)
  })
  test("getNameDiChar", () => {
    const namedichar: string = "namedichar_example"
    return expect(instance.getNameDiChar(namedichar, {})).resolves.toBe(null)
  })
  test("getNameMe", () => {
    const name: string = "name_example"
    return expect(instance.getNameMe(name, {})).resolves.toBe(null)
  })
  test("getNameUndiChar", () => {
    const name: string = "name_example"
    const _char: string = "_char_example"
    return expect(instance.getNameUndiChar(name, _char, {})).resolves.toBe(null)
  })
  test("getNameUnt", () => {
    const name: string = "name_example"
    return expect(instance.getNameUnt(name, {})).resolves.toBe(null)
  })
  test("getNameUpday", () => {
    const name: string = "name_example"
    return expect(instance.getNameUpday(name, {})).resolves.toBe(null)
  })
  test("getUsersUserId", () => {
    return expect(instance.getUsersUserId({})).resolves.toBe(null)
  })
  test("post", () => {
    const body: api.Body = {
  "value" : {
    "name" : "Dante",
    "complexity" : 5
  }
}
    return expect(instance.post(body, {})).resolves.toBe(null)
  })
  test("postNameDisc", () => {
    const name: string = "name_example"
    const body: api.Body4 = undefined
    return expect(instance.postNameDisc(name, body, {})).resolves.toBe(null)
  })
  test("postNamePinf", () => {
    const name: string = "name_example"
    const body: api.Body6 = undefined
    return expect(instance.postNamePinf(name, body, {})).resolves.toBe(null)
  })
  test("postNamePlayconfig", () => {
    const name: string = "name_example"
    const body: api.Body2 = undefined
    return expect(instance.postNamePlayconfig(name, body, {})).resolves.toBe(null)
  })
  test("postNameRewind", () => {
    const name: string = "name_example"
    const body: api.Body3 = undefined
    return expect(instance.postNameRewind(name, body, {})).resolves.toBe(null)
  })
  test("postNameTrusty", () => {
    const name: string = "name_example"
    const body: api.Body5 = undefined
    return expect(instance.postNameTrusty(name, body, {})).resolves.toBe(null)
  })
  test("postUser", () => {
    const name: string = "name_example"
    const body: api.Body1 = {
  "value" : {
    "firstName" : "Bob",
    "lastName" : "Fellow",
    "email" : "bob.fellow@gmail.com",
    "dateOfBirth" : "1996-08-24"
  }
}
    return expect(instance.postUser(name, body, {})).resolves.toBe(null)
  })
})

