/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * The Butterfly-API
 * The butterfly is a game/simulation model that is based on the Butterfly effect on human decision making modelled as ANNs, The project is inspired by the likes of Life is Strange Series , Until Dawn and is a going to have a DnD styled interface. This current API provides various game flows and models to create a simulation model or game of your own
 *
 * OpenAPI spec version: 1.0
 * Contact: dantraztrev@gmail.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://The-Butterfly.dantraztrev.repl.co/api/game".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Body
 */
export interface Body {
    /**
     * 
     * @type {string}
     * @memberof Body
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Body
     */
    complexity: number;
}
/**
 * 
 * @export
 * @interface Body1
 */
export interface Body1 {
    /**
     * 
     * @type {Array<ModelObject>}
     * @memberof Body1
     */
    charecters: Array<ModelObject>;
    /**
     * 
     * @type {Array<ModelObject>}
     * @memberof Body1
     */
    choices: Array<ModelObject>;
    /**
     * 
     * @type {Array<ModelObject>}
     * @memberof Body1
     */
    levels: Array<ModelObject>;
}
/**
 * 
 * @export
 * @interface Body2
 */
export interface Body2 {
    /**
     * 
     * @type {Array<ModelObject>}
     * @memberof Body2
     */
    choices: Array<ModelObject>;
    /**
     * 
     * @type {number}
     * @memberof Body2
     */
    confidence: number;
}
/**
 * 
 * @export
 * @interface Body3
 */
export interface Body3 {
    /**
     * 
     * @type {number}
     * @memberof Body3
     */
    day: number;
}
/**
 * 
 * @export
 * @interface Body4
 */
export interface Body4 {
    /**
     * 
     * @type {string}
     * @memberof Body4
     */
    name: string;
}
/**
 * 
 * @export
 * @interface Body5
 */
export interface Body5 {
    /**
     * 
     * @type {number}
     * @memberof Body5
     */
    trust: number;
}
/**
 * 
 * @export
 * @interface Body6
 */
export interface Body6 {
    /**
     * 
     * @type {string}
     * @memberof Body6
     */
    name: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    version: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    status: string;
}
/**
 * 
 * @export
 * @interface InlineResponse20010
 */
export interface InlineResponse20010 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010
     */
    choice: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20010
     */
    eft: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010
     */
    name: string;
}
/**
 * 
 * @export
 * @interface InlineResponse20011
 */
export interface InlineResponse20011 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20011
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20011
     */
    warning: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * The charecter being modified
     * @type {string}
     * @memberof InlineResponse2002
     */
    kar: string;
    /**
     * Will result into an array of arrays
     * @type {Array<ModelObject>}
     * @memberof InlineResponse2002
     */
    result: Array<ModelObject>;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2003
     */
    day: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2004
     */
    day: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2004
     */
    energy: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {InlineResponse2005Playerop}
     * @memberof InlineResponse2005
     */
    playerop?: InlineResponse2005Playerop;
}
/**
 * 
 * @export
 * @interface InlineResponse2005Playerop
 */
export interface InlineResponse2005Playerop {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2005Playerop
     */
    choices?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2006
     */
    rewinded: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006
     */
    day: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2007
     */
    eft: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2007
     */
    inf: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007
     */
    kar: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008
     */
    freq: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008
     */
    kar: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2009
     */
    action: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2009
     */
    kar: string;
}
/**
 * 
 * @export
 * @interface InlineResponse302
 */
export interface InlineResponse302 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse302
     */
    error: string;
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Day stat
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameDay(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getNameDay.');
            }
            const localVarPath = `/{name}/day`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Distance from a character
         * @param {string} namedichar 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameDiChar(namedichar: string, options: any = {}): FetchArgs {
            // verify required parameter 'namedichar' is not null or undefined
            if (namedichar === null || namedichar === undefined) {
                throw new RequiredError('namedichar','Required parameter namedichar was null or undefined when calling getNameDiChar.');
            }
            const localVarPath = `/{name}/di/{char}`
                .replace(`{${"name/di/{char"}}`, encodeURIComponent(String(namedichar)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User stat
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameMe(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getNameMe.');
            }
            const localVarPath = `/{name}/me`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get close to a Character
         * @param {string} name 
         * @param {string} _char 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameUndiChar(name: string, _char: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getNameUndiChar.');
            }
            // verify required parameter '_char' is not null or undefined
            if (_char === null || _char === undefined) {
                throw new RequiredError('_char','Required parameter _char was null or undefined when calling getNameUndiChar.');
            }
            const localVarPath = `/{name}/undi/{char}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"char"}}`, encodeURIComponent(String(_char)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Untouched day
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameUnt(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getNameUnt.');
            }
            const localVarPath = `/{name}/unt`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto upday
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameUpday(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getNameUpday.');
            }
            const localVarPath = `/{name}/upday`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if the API is running
         * @summary __init__
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersUserId(options: any = {}): FetchArgs {
            const localVarPath = `/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initialize the game
         * @param {Body} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post(body?: Body, options: any = {}): FetchArgs {
            const localVarPath = `/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Engage in a discussion
         * @param {string} name 
         * @param {Body4} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNameDisc(name: string, body?: Body4, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling postNameDisc.');
            }
            const localVarPath = `/{name}/disc`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body4" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Influence a certain charecter
         * @param {string} name 
         * @param {Body6} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNamePinf(name: string, body?: Body6, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling postNamePinf.');
            }
            const localVarPath = `/{name}/inf`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body6" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Configuring the player charecter
         * @param {string} name 
         * @param {Body2} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNamePlayconfig(name: string, body?: Body2, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling postNamePlayconfig.');
            }
            const localVarPath = `/{name}/playconfig`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body2" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rewind
         * @param {string} name 
         * @param {Body3} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNameRewind(name: string, body?: Body3, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling postNameRewind.');
            }
            const localVarPath = `/{name}/rewind`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body3" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Manual Trust setting for a charecter
         * @param {string} name 
         * @param {Body5} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNameTrusty(name: string, body?: Body5, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling postNameTrusty.');
            }
            const localVarPath = `/{name}/trusty`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body5" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user.
         * @summary start
         * @param {string} name The name of the user
         * @param {Body1} [body] Post the necessary fields for the API to create a new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUser(name: string, body?: Body1, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling postUser.');
            }
            const localVarPath = `/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body1" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Day stat
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameDay(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2004> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getNameDay(name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Distance from a character
         * @param {string} namedichar 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameDiChar(namedichar: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2008> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getNameDiChar(namedichar, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary User stat
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameMe(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2005> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getNameMe(name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get close to a Character
         * @param {string} name 
         * @param {string} _char 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameUndiChar(name: string, _char: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2008> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getNameUndiChar(name, _char, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Untouched day
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameUnt(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20011> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getNameUnt(name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Auto upday
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameUpday(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2003> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getNameUpday(name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Check if the API is running
         * @summary __init__
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersUserId(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getUsersUserId(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Initialize the game
         * @param {Body} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post(body?: Body, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2001> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).post(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Engage in a discussion
         * @param {string} name 
         * @param {Body4} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNameDisc(name: string, body?: Body4, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2007> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).postNameDisc(name, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Influence a certain charecter
         * @param {string} name 
         * @param {Body6} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNamePinf(name: string, body?: Body6, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20010> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).postNamePinf(name, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Configuring the player charecter
         * @param {string} name 
         * @param {Body2} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNamePlayconfig(name: string, body?: Body2, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2002> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).postNamePlayconfig(name, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Rewind
         * @param {string} name 
         * @param {Body3} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNameRewind(name: string, body?: Body3, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2006> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).postNameRewind(name, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Manual Trust setting for a charecter
         * @param {string} name 
         * @param {Body5} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNameTrusty(name: string, body?: Body5, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2009> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).postNameTrusty(name, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new user.
         * @summary start
         * @param {string} name The name of the user
         * @param {Body1} [body] Post the necessary fields for the API to create a new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUser(name: string, body?: Body1, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).postUser(name, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Day stat
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameDay(name: string, options?: any) {
            return DefaultApiFp(configuration).getNameDay(name, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Distance from a character
         * @param {string} namedichar 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameDiChar(namedichar: string, options?: any) {
            return DefaultApiFp(configuration).getNameDiChar(namedichar, options)(fetch, basePath);
        },
        /**
         * 
         * @summary User stat
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameMe(name: string, options?: any) {
            return DefaultApiFp(configuration).getNameMe(name, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get close to a Character
         * @param {string} name 
         * @param {string} _char 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameUndiChar(name: string, _char: string, options?: any) {
            return DefaultApiFp(configuration).getNameUndiChar(name, _char, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Untouched day
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameUnt(name: string, options?: any) {
            return DefaultApiFp(configuration).getNameUnt(name, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Auto upday
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameUpday(name: string, options?: any) {
            return DefaultApiFp(configuration).getNameUpday(name, options)(fetch, basePath);
        },
        /**
         * Check if the API is running
         * @summary __init__
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersUserId(options?: any) {
            return DefaultApiFp(configuration).getUsersUserId(options)(fetch, basePath);
        },
        /**
         * Initialize the game
         * @param {Body} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post(body?: Body, options?: any) {
            return DefaultApiFp(configuration).post(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Engage in a discussion
         * @param {string} name 
         * @param {Body4} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNameDisc(name: string, body?: Body4, options?: any) {
            return DefaultApiFp(configuration).postNameDisc(name, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Influence a certain charecter
         * @param {string} name 
         * @param {Body6} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNamePinf(name: string, body?: Body6, options?: any) {
            return DefaultApiFp(configuration).postNamePinf(name, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Configuring the player charecter
         * @param {string} name 
         * @param {Body2} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNamePlayconfig(name: string, body?: Body2, options?: any) {
            return DefaultApiFp(configuration).postNamePlayconfig(name, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Rewind
         * @param {string} name 
         * @param {Body3} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNameRewind(name: string, body?: Body3, options?: any) {
            return DefaultApiFp(configuration).postNameRewind(name, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Manual Trust setting for a charecter
         * @param {string} name 
         * @param {Body5} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNameTrusty(name: string, body?: Body5, options?: any) {
            return DefaultApiFp(configuration).postNameTrusty(name, body, options)(fetch, basePath);
        },
        /**
         * Create a new user.
         * @summary start
         * @param {string} name The name of the user
         * @param {Body1} [body] Post the necessary fields for the API to create a new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUser(name: string, body?: Body1, options?: any) {
            return DefaultApiFp(configuration).postUser(name, body, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Day stat
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getNameDay(name: string, options?: any) {
        return DefaultApiFp(this.configuration).getNameDay(name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Distance from a character
     * @param {string} namedichar 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getNameDiChar(namedichar: string, options?: any) {
        return DefaultApiFp(this.configuration).getNameDiChar(namedichar, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary User stat
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getNameMe(name: string, options?: any) {
        return DefaultApiFp(this.configuration).getNameMe(name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get close to a Character
     * @param {string} name 
     * @param {string} _char 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getNameUndiChar(name: string, _char: string, options?: any) {
        return DefaultApiFp(this.configuration).getNameUndiChar(name, _char, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Untouched day
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getNameUnt(name: string, options?: any) {
        return DefaultApiFp(this.configuration).getNameUnt(name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Auto upday
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getNameUpday(name: string, options?: any) {
        return DefaultApiFp(this.configuration).getNameUpday(name, options)(this.fetch, this.basePath);
    }

    /**
     * Check if the API is running
     * @summary __init__
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsersUserId(options?: any) {
        return DefaultApiFp(this.configuration).getUsersUserId(options)(this.fetch, this.basePath);
    }

    /**
     * Initialize the game
     * @param {Body} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public post(body?: Body, options?: any) {
        return DefaultApiFp(this.configuration).post(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Engage in a discussion
     * @param {string} name 
     * @param {Body4} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postNameDisc(name: string, body?: Body4, options?: any) {
        return DefaultApiFp(this.configuration).postNameDisc(name, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Influence a certain charecter
     * @param {string} name 
     * @param {Body6} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postNamePinf(name: string, body?: Body6, options?: any) {
        return DefaultApiFp(this.configuration).postNamePinf(name, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Configuring the player charecter
     * @param {string} name 
     * @param {Body2} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postNamePlayconfig(name: string, body?: Body2, options?: any) {
        return DefaultApiFp(this.configuration).postNamePlayconfig(name, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Rewind
     * @param {string} name 
     * @param {Body3} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postNameRewind(name: string, body?: Body3, options?: any) {
        return DefaultApiFp(this.configuration).postNameRewind(name, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Manual Trust setting for a charecter
     * @param {string} name 
     * @param {Body5} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postNameTrusty(name: string, body?: Body5, options?: any) {
        return DefaultApiFp(this.configuration).postNameTrusty(name, body, options)(this.fetch, this.basePath);
    }

    /**
     * Create a new user.
     * @summary start
     * @param {string} name The name of the user
     * @param {Body1} [body] Post the necessary fields for the API to create a new user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postUser(name: string, body?: Body1, options?: any) {
        return DefaultApiFp(this.configuration).postUser(name, body, options)(this.fetch, this.basePath);
    }

}
